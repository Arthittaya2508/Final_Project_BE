import express from "express";
import db from "../../lib/db.js";

const router = express.Router();

console.log("‚úÖ order_import route loaded");

// GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  const { order_import_id } = req.query; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ query string ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å URL

  console.log(`üì• GET /api/order_import?order_import_id=${order_import_id}`);

  try {
    let query = "SELECT * FROM order_import"; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î query ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    let params = [];

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ order_import_id
    if (order_import_id) {
      query += " WHERE order_import_id = ?";
      params.push(order_import_id); // ‡πÄ‡∏û‡∏¥‡πà‡∏° order_import_id ‡πÑ‡∏õ‡πÉ‡∏ô params
    }

    const [rows] = await db.query(query, params); // ‡πÉ‡∏ä‡πâ query ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß

    if (rows.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
    }

    res.json(rows); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö order_import_id)
  } catch (err) {
    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order_import ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
});

// POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
router.post("/", async (req, res) => {
  const { company_id, original_quantity, total_price, details } = req.body;

  console.log("üì§ POST /api/order_import ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", {
    company_id,
    original_quantity,
    total_price,
    details,
  });

  const connection = await db.getConnection();
  await connection.beginTransaction();

  try {
    // 1. Insert into order_import (‡πÉ‡∏ä‡πâ NOW() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö created_at)
    const [importResult] = await connection.query(
      `INSERT INTO order_import (company_id, original_quantity, total_price, created_at)
       VALUES (?, ?, ?, NOW())`,
      [company_id, original_quantity, total_price]
    );

    const order_import_id = importResult.insertId;
    console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á order_import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", order_import_id);

    // 2. Insert into order_import_detail (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
    for (const item of details) {
      const { pro_id, color_id, size_id, quantity, cost_price, brand_id } =
        item;

      await connection.query(
        `INSERT INTO order_import_detail 
          (pro_id, color_id, size_id, quantity, cost_price, brand_id, order_import_id)
         VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          pro_id,
          color_id,
          size_id,
          quantity,
          cost_price,
          brand_id,
          order_import_id,
        ]
      );
    }

    // 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order_import ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
    const [orderImportRows] = await connection.query(
      `SELECT * FROM order_import WHERE order_import_id = ?`,
      [order_import_id]
    );

    await connection.commit();
    connection.release();

    res.status(201).json({
      message: "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      order_import: orderImportRows[0], // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    });
  } catch (err) {
    await connection.rollback();
    connection.release();
    console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

router.put("/", async (req, res) => {
  const {
    order_import_id,
    company_id,
    original_quantity,
    total_price,
    details,
  } = req.body;

  console.log("üì§ PUT /api/order_import ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", {
    order_import_id,
    company_id,
    original_quantity,
    totaal_price,
    details,
  });

  const connection = await db.getConnection();
  await connection.beginTransaction();

  try {
    // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô order_import
    await connection.query(
      `UPDATE order_import 
       SET company_id = ?, original_quantity = ?, total_price = ? 
       WHERE order_import_id = ?`,
      [company_id, quantity, total_price, order_import_id]
    );

    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order_import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${order_import_id}`);

    // 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á order_import_detail ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const [existingDetails] = await connection.query(
      `SELECT * FROM order_import_detail WHERE order_import_id = ?`,
      [order_import_id]
    );

    // 3. ‡∏•‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ó‡∏£‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    for (const item of details) {
      const { pro_id, color_id, size_id, quantity, cost_price, brand_id } =
        item;

      const existing = existingDetails.find(
        (d) =>
          d.pro_id === pro_id &&
          d.color_id === color_id &&
          d.size_id === size_id &&
          d.brand_id === brand_id
      );

      if (existing) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö original_quantity
        await connection.query(
          `UPDATE order_import_detail 
           SET original_quantity = ?, quantity = ?, cost_price = ? 
           WHERE order_import_detail_id = ?`,
          [
            existing.quantity,
            quantity,
            cost_price,
            existing.order_import_detail_id,
          ]
        );
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ insert ‡πÉ‡∏´‡∏°‡πà
        await connection.query(
          `INSERT INTO order_import_detail 
            (pro_id, color_id, size_id, quantity, cost_price, brand_id, order_import_id, original_quantity)
           VALUES (?, ?, ?, ?, ?, ?, ?, NULL)`,
          [
            pro_id,
            color_id,
            size_id,
            quantity,
            cost_price,
            brand_id,
            order_import_id,
          ]
        );
      }
    }

    // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order_import ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
    const [orderImportRows] = await connection.query(
      `SELECT * FROM order_import WHERE order_import_id = ?`,
      [order_import_id]
    );

    await connection.commit();
    connection.release();

    res.status(200).json({
      message: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß",
      order_import: orderImportRows[0],
    });
  } catch (err) {
    await connection.rollback();
    connection.release();
    console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});
export default router;
